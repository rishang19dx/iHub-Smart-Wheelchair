# robot_radius: 0.15

# transform_tolerance: 0.4
# map_type: costmap

# obstacle_layer:
#  enabled: true
#  obstacle_range: 2.5
#  raytrace_range: 3.5
#  inflation_radius: 0.2 #initially 0.2
#  track_unknown_space: false
#  combination_method: 1

#  observation_sources: laser_scan_sensor
#  laser_scan_sensor: {data_type: LaserScan, topic: scan, marking: true, clearing: true}


# inflation_layer:
#   enabled:              true
#   cost_scaling_factor:  5.0  # exponential rate at which the obstacle cost drops off (default: 10)
#   inflation_radius:     0.4   # max distance from an obstacle at which costs are incurred for planning paths. chnaged was 0.2

# static_layer:
#   enabled:              true
#   map_topic:            "map"

#NEW
#robot_radius: 0.130 #initially 0.15
# robot_radius: 0.35
footprint: [[0.55, 0.35], [0.55, -0.35], [-0.45, -0.35], [-0.45, 0.350]]
transform_tolerance: 0.5
map_type: costmap

obstacle_layer:
 enabled: true
 obstacle_range: 2.5
 raytrace_range: 3.5
 inflation_radius: 0.5 #initially 0.2
 track_unknown_space: false
 combination_method: 1

 observation_sources: laser_scan_sensor
 laser_scan_sensor: {data_type: LaserScan, topic: scan, marking: true, clearing: true}


inflation_layer:
  enabled:              true
  cost_scaling_factor:  5.0  # exponential rate at which the obstacle cost drops off (default: 10)
  inflation_radius:     0.2   # max distance from an obstacle at which costs are incurred for planning paths. chnaged was 0.2

static_layer:
  enabled:              true
  map_topic:            "map"

rgbd_obstacle_layer:
    plugin: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer"
    enabled:                  true
    voxel_decay:              10.0  # seconds if linear, e^n if exponential
    decay_model:              0     # 0=linear, 1=exponential, -1=persistent
    voxel_size:               0.05  # meters
    track_unknown_space:      true  # default space is known
    mark_threshold:           0     # voxel height
    update_footprint_enabled: true
    combination_method:       0     # 1=max, 0=override
    origin_z:                 0.0   # meters
    publish_voxel_map:        true # default off
    transform_tolerance:      0.2   # seconds
    mapping_mode:             false # default off, saves map not for navigation
    map_save_duration:        60.0  # default 60s, how often to autosave
    observation_sources:      rgbd1_mark rgbd1_clear
    rgbd1_mark:
        data_type: PointCloud2
        topic: /camera/depth/color/points
        marking: true
        clearing: false
        obstacle_range: 2.0          # meters
        min_obstacle_height: 0.1                          # default 0, meters
        max_obstacle_height: 2.5     # default 3, meters
        expected_update_rate: 0.0    # default 0, if not updating at this rate at least, remove from buffer
        observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
        inf_is_valid: false          # default false, for laser scans
        filter: "passthrough"        # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on 
        voxel_min_points: 0          # default 0, minimum points per voxel for voxel filter
        clear_after_reading: true    # default false, clear the buffer after the layer gets readings from it
    rgbd1_clear:
        data_type: PointCloud2
        topic: /camera/depth/color/points
        marking: false
        clearing: true
        max_z: 7.0                  # default 0, meters
        min_z: 0.1                  # default 10, meters
        vertical_fov_angle: 0.8745  # default 0.7, radians
        horizontal_fov_angle: 1.048 # default 1.04, radians
        decay_acceleration: 1.0     # default 0, 1/s^2. If laser scanner MUST be 0
        model_type: 0                # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar